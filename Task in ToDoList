* Đọc về phần Life Cycle
* Chia component
* Xóa sửa task trong list

* Xử lý thêm chức năng: 
- Phân trang theo page (max = 5 page)
- Click double vào task trong list => Focus lên ô input và edit task


====================== L5 =================================

- Tìm hiểu các kiến thức về React Advanced: Code Splitting, Context, Error-Boudaries, Hight Order Components, Portals,... Immer Library.
- Sử dụng Context để thêm vào chức năng Theme cho trang web, ví dụ như sẽ có 1 nút để bật chế độ dark/light mode.
- Thay đổi chức năng phân trang thành scroll giống như Mess.

======================= L6 ================================

Meeting note 13/05:
+) Tách các phần data mock ra thành file riêng => dễ đọc, dễ kiểm soát 
+) Context flexible trong việc control state trong cây component, tuy nhiên cần kiểm soát để:
	-> tránh mất đi tính đóng gói, tính tái sử dụng của các common component
	-> tránh việc không kiểm soát được re-render
+) Refactor code theo ES5, ES6
+) Tìm hiểu + ứng dụng HOC (Higher-order Component) để làm lại phần scroll
+) Tìm hiểu + ứng dụng immer.js


======================= L7 ================================

- Theme Provider -> Quản lý theme là chính, nếu toggle là chưa clear ?
- Với immer.js -> draft[index].text = inputValue.trim()
- Dùng immer sẽ chọc thẳng vào array sau đó để action (edit, delete, ...). Còn nghiệp vụ thông thường sẽ là duyệt mảng, tìm element cần action và sau đó action.
- Nếu đưa tất cả các nghiệp vụ xoay quanh task -> Không phát sinh bất kỳ một case xử lý gì giữa việc giao tiếp giữa các cây component. Về mặt bản chất thì cây component sẽ chỉ có 1 component ?
- Không có tính common, không có tính đóng gói 
- HOC linh động ở nơi nó được gọi đến, nên nếu trong HOC có 1 state lấy từ context -> Nó sẽ thu hẹp đi sự linh hoạt, tính tái sử dụng của nó.

=> Chuyển đổi từ Class Component -> Function Component

======================= L8 ================================

-> Lifting state up react
- Composition vs Inheritance: 
- Code-Splitting: 
- Portals: 

======================= L9 ================================
- Review code:
+) inputValue, editingId nằm ở trong InputField => Thay đổi state chỉ component đó thay đổi ? Không re-render component cha
+) Không cần tường minh như TaskListWithScroll -> 
+) Cú pháp code cần sửa: 									x
  const filteredTasks = tasks.filter((task) => {
    if (filter === STATUS_TASK.ACTIVE) return !task.completed;
    if (filter === STATUS_TASK.COMPLETED) return task.completed;
    return true;
  }); 
+) State từ thằng input ref để không gây re-render.
+) Nơi nào khai báo state -> Triênr khai những action xoay quanh state.
+) TaskList > ToDoItem chứ không phải render thẳng ra ul li.					x
+) Sửa immer produce                       							x
+) Chuyển HOC => Custom Hook.									x

*** Lý thuyết sâu hơn về useMemo, useCallback, Clousue, useEffect. -> Sâu về tư tưởng: memoization ???


======================= L10 =================================

+) Cách sử dụng không giống 1 thằng hook thông thường -> Phổ biến nó là 1 component, nó sẽ trả về data, thay vì will ?
+) inputRef ở HomeMain -> Sử dụng luôn -> Truyền xuống component con là 1 function => Chứ không truyền inputRef xuống ? => Cách hiện tại đang không tường minh, không bị phân tán logic
+) Có thể truyền ref như 1 props (không cần sử dụng forwardRef())
+) useEffect: 
      -  
      
      
=======> MockAPI backend: +) CRUD, xử lý promise
			       +) Trải nghiệm của end user UX


======================== L11 =================================

+) Tìm hiểu về thằng AJAX
+) Sử dụng redux -> Đọc docs redux

======================== L12 =================================
 React-redux core: 
 - Glossary
 - 
-> +) Tìm hiểu về thư viện Reselector + áp dụng vào dự án
   +) Version 3.0.1
   +) Redux-sage: 
   +) 
	



























































































